/////two pointers method ////////

class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        vector<int> v;
        int i=0,j=numbers.size()-1;
        while(i<j)
        {
            if(numbers[i]+numbers[j]==target)
            {
                v.push_back(i+1);
                v.push_back(j+1);
                return v;
            }
            else if(numbers[i]+numbers[j]<target)
                i++;
            else
                j--;
        }
        return v;
    }
};

/////////binary search///////////

class Solution {
public:
    vector<int> twoSum(vector<int> &numbers, int target) {
        vector<int> v;
    if(numbers.empty()) return {};
    for(int i=0; i<numbers.size()-1; i++) {
        int start=i+1, end=numbers.size()-1, gap=target-numbers[i];
        while(start <= end) {
            int m = start+(end-start)/2;
            if(numbers[m] == gap)
             {
                
                v.push_back(i+1);
                v.push_back(m+1);
                return v;
                
                }
            else if(numbers[m] > gap)
                end=m-1;
            else 
                start=m+1;
        }
    }
        return v;
}
};
