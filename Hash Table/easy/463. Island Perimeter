class Solution {
public:
    int islandPerimeter(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        int perimeter=0;
        int count=4;
        for(int i=0;i<m;i++)
        {   
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==1)
                {
                    if(j-1>=0 && grid[i][j-1]==1)
                    count--;
                if(i-1>=0 && grid[i-1][j]==1)
                    count--;
                if(i+1<m && grid[i+1][j]==1)
                    count--;
                if(j+1<n&&grid[i][j+1]==1)
                    count--;
                cout<<count<<" ";
                perimeter+=count;
                count=4;
                }
            }
        }
        return perimeter;
    }
};

............................................hash map.......................................................

class Solution {
public:
    int islandPerimeter(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        int perimeter=0;
        map<pair<int,int>,int> mp;
        for(int i=0;i<m;i++)
        {   
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==1)
                {   mp[{i,j}]=4;
                    if(j-1>=0 && grid[i][j-1]==1)
                    mp[{i,j}]--;
                if(i-1>=0 && grid[i-1][j]==1)
                    mp[{i,j}]--;
                if(i+1<m && grid[i+1][j]==1)
                    mp[{i,j}]--;
                if(j+1<n&&grid[i][j+1]==1)
                    mp[{i,j}]--;
                }
            }
        }
        for(auto x:mp)
            perimeter+=x.second;
        return perimeter;
    }
};

................................................................................................................

class Solution {
public:
    int islandPerimeter(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        int perimeter=0;
        for(int i=0;i<m;i++)
        {   
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==1)
                {
                if(j-1>=0 && grid[i][j-1]==0)
                    perimeter++;
                if(i-1>=0 && grid[i-1][j]==0)
                    perimeter++;
                if(i+1<m && grid[i+1][j]==0)
                    perimeter++;
                if(j+1<n&&grid[i][j+1]==0)
                    perimeter++;
                if(j-1<0)
                    perimeter++;
                if(j+1==n)
                    perimeter++;
                if(i-1<0)
                    perimeter++;
                if(i+1==m)
                    perimeter++;
                }
            }
        }
        return perimeter;
    }
};
